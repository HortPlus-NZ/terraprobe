---
- hosts: app_server
  become: yes
  remote_user: ubuntu
  gather_facts: no
  vars_files:
    - aws_keys.yml
    - vars.yml

  tasks:
    - name: Change hostname
      hostname:
        name: "{{ domain_name }}"

    - name: Add host to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: '127.0.0.1 localhost {{ domain_name }} www.{{ domain_name }}'
        state: present

    - name: Add Apt signing key for postgresql
      apt_key:
        id: 7FCC7D46ACCC4CF8
        keyserver: keyserver.ubuntu.com

    #- name: Install aptitude
    #  apt:
    #    name: aptitude
    #    state: present
    #    update_cache: yes

    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day

    - name: Install NZ locale
      command: locale-gen {{ locale }}

    - name: Set locale
      command: update-locale LANG={{ locale }} LC_ALL={{ locale }}

    - name: Set /etc/localtime
      file: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime

    - name: Set /etc/timezone
      template: src=../../ansible_templates/timezone.j2 dest=/etc/timezone
      notify: update tzdata

    - name: Add apt repository for postgresql
      apt_repository:
        repo: 'deb http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main'
        update-cache: yes

    - name: Make sure we run python3 by changing syslink for python sudo ln -sfn /usr/bin/python3.10 /usr/bin/python. Should create lrwxrwxrwx  1 root root          18 May  3 11:00  python -> /usr/bin/python3.10
      file:
        src: /usr/bin/python3.10
        dest: /usr/bin/python
        state: link
        force: yes

    - name: Install system packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - git
          - nginx
          - certbot
          - postgresql-14
          - postgresql-client-14
          - postgresql-server-dev-14
          - python3-dev
          - python3-pip
          - python3-venv
          - python3-certbot-nginx
          - virtualenv
          - ssl-cert
          - tzdata
          - unzip
          - acl

    - name: Upgrade pip
      pip:
        name: pip
        executable: pip3
        extra_args: --upgrade

    - name: Install pip3 packages
      pip:
        name: "{{ item }}"
        executable: pip3
      with_items:
        - Django==4.2.1
        - psycopg2==2.9.6
        - uWSGI==2.0.22
        - django-address==0.2.8
        - djangorestframework==3.14.0
        - requests==2.22.0
        - django-crispy-forms==2.0
        - django-extensions==3.2.1
        - django-tables2==2.5.3
        - django-formtools==2.4.1
        - django-bootstrap-datepicker-plus==5.0.3
        - django-bootstrap4==23.2
        - python-dateutil==2.8.1
        - django-autocomplete-light==3.9.7
        - django-cors-headers==4.0.0
        - django-rest-auth==0.9.5
        - coreapi==2.3.3
        - numpy==1.25.1
        - django-import-export==3.2.0
        - djangorestframework_simplejwt==5.2.2

    - name: Create main directory for the project
      file:
        path: "{{ project_root }}"
        state: directory
        mode: 0775

    - name: Create Unix user group
      group:
        name: webapps
        state: present

    - name: Create Unix user
      user:
        name: "{{ user_username }}"
        shell: /bin/bash
        groups: webapps
        home: "{{ project_root }}"

    - name: Create inner directories for the project
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ project_name }}"
        group: webapps
        mode: 0775
      with_items:
        - "{{ project_root }}/src"
        - "{{ project_root }}/.ssl"
        - "{{ project_root }}/logs"

    #- name: Save ssh key to server
    #  copy: src={{ ssh_github_key }} dest={{ project_root }}/.ssh/id_rsa mode=600

    - name: Set directory permissions
      file:
        dest: "{{ project_root }}"
        owner: "{{ project_name }}"
        group: users
        recurse: yes

    - name: Copy PostgreSQL authentication configuration
      template:
        src: ../../ansible_templates/pg_hba.j2
        dest: /etc/postgresql/14/main/pg_hba.conf
      notify:
        - restart postgresql

    # Do we Need this? Keep it clean install for now
    #- name: Copy PostgreSQL main configuration
    #  template:
    #    src: ../../ansible_templates/postgresql.j2
    #    dest: /etc/postgresql/10/main/postgresql.conf
    #  notify:
    #    - restart postgresql

    - name: Make sure PostgreSQL server is running
      service: name=postgresql state=started

    - name: Create database user
      become_user: postgres
      postgresql_user: name={{ soil_db_user }} password={{ soil_db_password }} role_attr_flags=CREATEDB,LOGIN encrypted=yes

    - name: Create database
      become_user: postgres
      postgresql_db: name={{ soil_db_name }} owner={{ soil_db_user }}

    - name: Remove default Nginx site
      file: path=/etc/nginx/sites-enabled/default state=absent

    - name: Add Nginx configuration
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "sites-enabled"
        line: "include {{ project_root }}/src/soil/config/nginx.conf;"
        firstmatch: yes
        state: present

    - name: Copy logrotate configuration for terraprobe
      template:
        src: ../../ansible_templates/logrotate.j2
        dest: /etc/logrotate.d/terraprobe

    #- name: Create and Install Cert Using Plugin. Ip address of new server needs to be assigned to domain first
    #  command: "certbot certonly --nginx -d {{ domain_name }} -m mahalsnz@gmail.com --agree-tos --noninteractive --redirect"

  handlers:
    - name: update tzdata
      command: /usr/sbin/dpkg-reconfigure --frontend noninteractive tzdata

    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart postgresql
      service: name=postgresql state=restarted

- import_playbook: deploy.yml
