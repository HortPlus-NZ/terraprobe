# Generated by Django 3.0.6 on 2021-08-09 17:42

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('address', '0002_auto_20160213_1726'),
    ]

    operations = [
        migrations.CreateModel(
            name='CriticalDateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('season_flag', models.BooleanField()),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Crop', max_length=100)),
                ('dwu_formaula', models.CharField(blank=True, max_length=100, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Diviner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diviner_number', models.CharField(max_length=50)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('document', models.FileField(upload_to='documents/')),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('owner', models.CharField(default='TEST', max_length=100)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('landline', models.CharField(blank=True, max_length=40, null=True)),
                ('mobile', models.CharField(blank=True, max_length=40, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='address.Address')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Probe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(default='Manual', max_length=100)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.Crop')),
            ],
        ),
        migrations.CreateModel(
            name='ReadingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('formula', models.CharField(blank=True, max_length=200, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('season_date', models.DateField(default=django.utils.timezone.now, help_text='The Year to create a new season. For a season spanning two years is must be the starting year. ', null=True)),
                ('current_flag', models.BooleanField(default=None, help_text='Is this the current season, only one season can be the current season', null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFullName',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SeasonStartEnd',
            fields=[
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='skeleton.Season')),
                ('season_name', models.CharField(max_length=20)),
                ('site_name', models.CharField(max_length=100)),
                ('season_current_flag', models.BooleanField()),
                ('period_from', models.DateField()),
                ('period_to', models.DateField()),
            ],
            options={
                'db_table': 'skeleton_season_start_end',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WeatherStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('code', models.CharField(max_length=4, null=True, unique=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='address.State')),
            ],
        ),
        migrations.CreateModel(
            name='Variety',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StrategyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('percentage', models.FloatField(default=0, help_text='A percentage between 0 and 1 indicating the difference that the lower strategy should be below the upper strategy for a site. This is taken from the high limit.')),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.IntegerField(default=0, help_text='A positive or negative number indicated the amount of days away from that critical date.')),
                ('percentage', models.FloatField(default=0, help_text='A percentage between 0 and 1 indicating the variation from the limit associated with the strategy.')),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('critical_date_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.CriticalDateType')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.StrategyType')),
            ],
        ),
        migrations.CreateModel(
            name='SoilProfileType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(default='#FFFFFF', max_length=7, null=True)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_number', models.IntegerField(default=0, unique=True)),
                ('selected', models.BooleanField(null=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('irrigation_method', models.IntegerField(choices=[(0, 'Non-Drip (Overhead)'), (1, 'Drip')], default=1, help_text='Are you sure you want to change this to Overhead?')),
                ('irrigation_area', models.FloatField(blank=True, null=True)),
                ('irrigation_time', models.FloatField(blank=True, null=True)),
                ('irrigation_delivered_volume', models.FloatField(blank=True, null=True)),
                ('irrigation_position', models.FloatField(blank=True, null=True, verbose_name='Inline Water Meter Position in Trees')),
                ('irrigation_yield', models.FloatField(blank=True, null=True)),
                ('irrigation_allocation_volume', models.FloatField(blank=True, null=True)),
                ('rz1_bottom', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, help_text='The Bottom Depth of Root Zone 1. The Top will aways be zero.', null=True)),
                ('rz2_bottom', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, help_text='The Bottom Depth of Root Zone 2. The Top will aways be zero.', null=True)),
                ('rz3_bottom', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, help_text='The Bottom Depth of Root Zone 3. The Top will aways be zero.', null=True)),
                ('rz_percentage', models.FloatField(default=1, help_text='A percentage between 0 and 1 indicating total 7 day water use. A lower percentage from 100 indicates a smaller root stock.')),
                ('depth1', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth2', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth3', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth4', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth5', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth6', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth7', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth8', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth9', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth10', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, null=True)),
                ('depth_he1', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=1, null=True)),
                ('depth_he2', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=2, null=True)),
                ('depth_he3', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=3, null=True)),
                ('depth_he4', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=4, null=True)),
                ('depth_he5', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=5, null=True)),
                ('depth_he6', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=6, null=True)),
                ('depth_he7', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=7, null=True)),
                ('depth_he8', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=8, null=True)),
                ('depth_he9', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=9, null=True)),
                ('depth_he10', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=10, null=True)),
                ('rooting_barrier', models.IntegerField(blank=True, choices=[(0, 0), (10, 10), (20, 20), (30, 30), (40, 40), (50, 50), (60, 60), (70, 70), (80, 80), (90, 90), (100, 100), (110, 110), (120, 120)], default=0, help_text='Used in the Soil Profile to indicate a barrier for roots', null=True)),
                ('emitter_rate', models.FloatField(default=1)),
                ('row_spacing', models.FloatField(default=1, verbose_name='Row Spacing (Meters)')),
                ('emitter_spacing', models.FloatField(default=1, verbose_name='Emitter Spacing (Meters)')),
                ('plant_spacing', models.FloatField(default=1, verbose_name='Plant Spacing (Meters)')),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.Farm')),
                ('lower_limit', models.ForeignKey(blank=True, help_text='Target Lower line for Graph', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lower_limit_type', to='skeleton.ReadingType')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Product')),
                ('profile1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_1', to='skeleton.SoilProfileType')),
                ('profile10', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_10', to='skeleton.SoilProfileType')),
                ('profile2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_2', to='skeleton.SoilProfileType')),
                ('profile3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_3', to='skeleton.SoilProfileType')),
                ('profile4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_4', to='skeleton.SoilProfileType')),
                ('profile5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_5', to='skeleton.SoilProfileType')),
                ('profile6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_6', to='skeleton.SoilProfileType')),
                ('profile7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_7', to='skeleton.SoilProfileType')),
                ('profile8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_8', to='skeleton.SoilProfileType')),
                ('profile9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='soil_profile_type_9', to='skeleton.SoilProfileType')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Report')),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.StrategyType')),
                ('technician', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='technician_id', to=settings.AUTH_USER_MODEL)),
                ('upper_limit', models.ForeignKey(blank=True, help_text='Target Upper line for Graph', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upper_limit_type', to='skeleton.ReadingType')),
            ],
        ),
        migrations.CreateModel(
            name='SeasonalSoilStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_type', models.CharField(choices=[('LIG', 'Light'), ('MED', 'Medium'), ('HEV', 'Heavy')], default='HEV', max_length=3)),
                ('total_irrigation_mms', models.IntegerField(default=0, help_text='Total Irrigation for all sites of that soil type', null=True)),
                ('total_effective_irrigation', models.IntegerField(default=0, help_text='Total Effective Irrigation for all sites of that soil type', null=True)),
                ('perc_effective_irrigation', models.IntegerField(default=0, help_text='Percentage Effective Irrigation for all sites of that soil type', null=True)),
                ('crop', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='skeleton.Crop')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='skeleton.Season')),
            ],
        ),
        migrations.CreateModel(
            name='Reading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('reviewed', models.BooleanField(default=False, help_text='Has reading been reviewed. Only really applies to Probe readings.', null=True)),
                ('depth1', models.FloatField(blank=True, null=True, verbose_name='Depth1 VSW/Normal')),
                ('depth2', models.FloatField(blank=True, null=True, verbose_name='Depth1 VSW/Normal')),
                ('depth3', models.FloatField(blank=True, null=True, verbose_name='Depth3 VSW/Normal')),
                ('depth4', models.FloatField(blank=True, null=True, verbose_name='Depth4 VSW/Normal')),
                ('depth5', models.FloatField(blank=True, null=True, verbose_name='Depth5 VSW/Normal')),
                ('depth6', models.FloatField(blank=True, null=True, verbose_name='Depth6 VSW/Normal')),
                ('depth7', models.FloatField(blank=True, null=True, verbose_name='Depth7 VSW/Normal')),
                ('depth8', models.FloatField(blank=True, null=True, verbose_name='Depth8 VSW/Normal')),
                ('depth9', models.FloatField(blank=True, null=True, verbose_name='Depth9 VSW/Normal')),
                ('depth10', models.FloatField(blank=True, null=True, verbose_name='Depth10 VSW/Normal')),
                ('depth1_count', models.FloatField(blank=True, null=True)),
                ('depth2_count', models.FloatField(blank=True, null=True)),
                ('depth3_count', models.FloatField(blank=True, null=True)),
                ('depth4_count', models.FloatField(blank=True, null=True)),
                ('depth5_count', models.FloatField(blank=True, null=True)),
                ('depth6_count', models.FloatField(blank=True, null=True)),
                ('depth7_count', models.FloatField(blank=True, null=True)),
                ('depth8_count', models.FloatField(blank=True, null=True)),
                ('depth9_count', models.FloatField(blank=True, null=True)),
                ('depth10_count', models.FloatField(blank=True, null=True)),
                ('rz1', models.FloatField(blank=True, null=True, verbose_name='Root Zone 1')),
                ('rz2', models.FloatField(blank=True, null=True, verbose_name='Root Zone 2')),
                ('rz3', models.FloatField(blank=True, null=True, verbose_name='Root Zone 3')),
                ('deficit', models.FloatField(blank=True, help_text='Deficit is the difference between the full point reading and root zone 1', null=True)),
                ('probe_dwu', models.FloatField(blank=True, help_text='PDWU is the rate of change of the water content of root zone 1, expressed in mm/day', null=True, verbose_name='Probe Daily Water Use')),
                ('estimated_dwu', models.FloatField(blank=True, help_text='EDWU is KC Reading for crop multiplied by ET reading for region', null=True, verbose_name='Estimated Daily Water Use')),
                ('rain', models.FloatField(blank=True, help_text='Rainfall reding', null=True)),
                ('meter', models.FloatField(blank=True, help_text='Meter reading', null=True, verbose_name='Inline Water Meter in Litres')),
                ('irrigation_litres', models.FloatField(blank=True, help_text='Difference in Meter readings multipled by the Irrigation Postion', null=True, verbose_name='Irrigation in Litres')),
                ('irrigation_mms', models.FloatField(blank=True, help_text='Irrigation in Litres divided by Schedule Rowspace and Schedule Plantspace divided by 10000', null=True, verbose_name='Irrigation in Millimetres')),
                ('effective_rain_1', models.FloatField(blank=True, help_text='keydata 5 - Well Complicated', null=True)),
                ('effective_rainfall', models.FloatField(blank=True, help_text='keydata 6', null=True)),
                ('efflrr1', models.FloatField(blank=True, help_text='keydata 7', null=True)),
                ('efflrr2', models.FloatField(blank=True, help_text='keydata 8', null=True)),
                ('effective_irrigation', models.FloatField(blank=True, help_text='keydata 9', null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('rec_Mon', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Tue', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Wed', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Thu', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Fri', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Sat', models.FloatField(blank=True, default=0, null=True)),
                ('rec_Sun', models.FloatField(blank=True, default=0, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('serial_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Probe')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.ReadingType')),
            ],
            options={
                'get_latest_by': 'date',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='report',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Report'),
        ),
        migrations.AddField(
            model_name='product',
            name='variety',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.Variety'),
        ),
        migrations.CreateModel(
            name='ProbeDiviner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('diviner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Diviner')),
                ('probe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.Probe')),
            ],
        ),
        migrations.CreateModel(
            name='KCReading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_from', models.DateField(default=django.utils.timezone.now)),
                ('period_to', models.DateField(default=django.utils.timezone.now)),
                ('kc', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.Crop')),
                ('region', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='address.State')),
                ('season', models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Season')),
            ],
        ),
        migrations.AddField(
            model_name='farm',
            name='report',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Report'),
        ),
        migrations.AddField(
            model_name='farm',
            name='weatherstation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.WeatherStation'),
        ),
        migrations.CreateModel(
            name='ETReading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('weekly', models.FloatField(blank=True, null=True)),
                ('daily', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='address.State')),
            ],
        ),
        migrations.AddField(
            model_name='diviner',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Site'),
        ),
        migrations.AddField(
            model_name='crop',
            name='report',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Report'),
        ),
        migrations.CreateModel(
            name='CriticalDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='skeleton.Season')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='critical_date_types', to='skeleton.CriticalDateType')),
            ],
        ),
        migrations.CreateModel(
            name='Calibration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_type', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=1, null=True)),
                ('period_from', models.DateField(default=django.utils.timezone.now)),
                ('period_to', models.DateField(blank=True, null=True)),
                ('slope', models.FloatField(blank=True, null=True)),
                ('intercept', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('created_by', models.ForeignKey(default=django.contrib.auth.models.User, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('serial_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skeleton.Probe')),
            ],
        ),
        migrations.CreateModel(
            name='SiteDescription',
            fields=[
            ],
            options={
                'ordering': ['site_number'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('skeleton.site',),
        ),
        migrations.AddConstraint(
            model_name='strategytype',
            constraint=models.CheckConstraint(check=models.Q(percentage__gte=0), name='strategy_type_percentage_gte_0'),
        ),
        migrations.AddConstraint(
            model_name='strategytype',
            constraint=models.CheckConstraint(check=models.Q(percentage__lte=1), name='strategy_type_percentage_1te_1'),
        ),
        migrations.AddConstraint(
            model_name='strategy',
            constraint=models.CheckConstraint(check=models.Q(percentage__gte=0), name='strategy_percentage_gte_0'),
        ),
        migrations.AddConstraint(
            model_name='strategy',
            constraint=models.CheckConstraint(check=models.Q(percentage__lte=1), name='strategy_percentage_1te_1'),
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.CheckConstraint(check=models.Q(rz_percentage__gte=0), name='site_rz_percentage_gte_0'),
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.CheckConstraint(check=models.Q(rz_percentage__lte=1), name='site_rz_percentage_percentage_1te_1'),
        ),
        migrations.AlterUniqueTogether(
            name='seasonalsoilstat',
            unique_together={('season', 'crop', 'soil_type')},
        ),
        migrations.AddField(
            model_name='reading',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='skeleton.SiteDescription'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('crop', 'variety')},
        ),
        migrations.AlterUniqueTogether(
            name='etreading',
            unique_together={('date', 'state')},
        ),
        migrations.AddField(
            model_name='criticaldate',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='skeleton.SiteDescription'),
        ),
        migrations.AlterUniqueTogether(
            name='reading',
            unique_together={('date', 'site', 'type')},
        ),
        migrations.AlterUniqueTogether(
            name='criticaldate',
            unique_together={('site', 'season', 'type')},
        ),
    ]
